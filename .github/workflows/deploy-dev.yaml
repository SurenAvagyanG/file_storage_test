name: Deploy dev


jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: helio-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:latest -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg NPM_READ_TOKEN=${{ secrets.NPM_TOKEN }} --build-arg APP_PORT=8080 --build-arg VERSION=$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/helio-api/dev-task-definition.json
          container-name: helio-api-container
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: helio-be-service
          cluster: backend-cluster
          wait-for-service-stability: true

  notify:
    needs: [build]
    if: always()
    uses: heliofi/backend/.github/workflows/notifications.yaml@fd1361a8b2c290f24fd3574ea34e654b08a85ae5 # TODO replace with @main after prod release
    with:
      environment: 'DEV'
      status: ${{ needs.build.result }}
      sha: ${{ github.sha }}
    secrets:
      slack_webhook: ${{ secrets.SLACK_BACKEND_DEPLOYMENT_WEBHOOK }}
